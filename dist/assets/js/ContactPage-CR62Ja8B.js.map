{"version":3,"file":"ContactPage-CR62Ja8B.js","sources":["../../../src/utils/security.ts","../../../src/pages/ContactPage.tsx"],"sourcesContent":["/**\n * Security utilities for form input validation, sanitization,\n * rate limiting, and bot prevention.\n */\n\nconst EMAIL_REGEX = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\nconst NAME_REGEX = /^[a-zA-Z]+(?:[\\s'-][a-zA-Z]+)*$/; // Allows multiple words with spaces, hyphens, apostrophes between them\nconst MAX_LENGTH = {\n  name: 100,\n  email: 254, // Maximum length per RFC 5321\n  subject: 150,\n  message: 3000,\n};\n\nconst MIN_LENGTH = {\n  name: 2,\n  message: 10,\n};\n\n// Rate limiting configuration\nconst RATE_LIMIT = {\n  maxAttempts: 5,\n  timeWindow: 5 * 60 * 1000, // 5 minutes\n  // Random delay to prevent timing attacks\n  minDelay: 100, // Minimum delay in ms\n  maxDelay: 500, // Maximum delay in ms\n};\n\n// Storage for rate limiting (would be in redis/db in production)\nlet attempts = 0;\nlet firstAttemptTime: number | null = null;\n// Note: IP-based rate limiting would be implemented server-side\n\n/**\n * Add random delay to prevent timing-based attacks\n */\nconst addRandomDelay = async (): Promise<void> => {\n  const delay = Math.floor(\n    Math.random() * (RATE_LIMIT.maxDelay - RATE_LIMIT.minDelay + 1)\n  ) + RATE_LIMIT.minDelay;\n  \n  return new Promise(resolve => setTimeout(resolve, delay));\n};\n\n/**\n * Logs security events if a logger is configured\n * (No-op in client-side code, but would be implemented server-side)\n */\nconst logSecurityEvent = (event: string, details: Record<string, any>): void => {\n  if (process.env.NODE_ENV === 'development') {\n    console.warn(`Security Event: ${event}`, details);\n  }\n  // In production, this would send to a logging service\n};\n\n/**\n * Sanitize string input to prevent XSS\n */\nexport const sanitizeInput = (input: string): string => {\n  return input\n    .replace(/[<>]/g, '') // Remove < and > to prevent HTML injection\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;')\n    .trim();\n};\n\n/**\n * Validate email format\n */\nexport const isValidEmail = (email: string): boolean => {\n  return EMAIL_REGEX.test(email) && email.length <= MAX_LENGTH.email;\n};\n\n/**\n * Validate name format\n */\nexport const isValidName = (name: string): boolean => {\n  return NAME_REGEX.test(name) && \n         name.length >= MIN_LENGTH.name && \n         name.length <= MAX_LENGTH.name;\n};\n\n/**\n * Check for suspicious patterns in input\n * Returns true if input looks suspicious\n */\nexport const isInputSuspicious = (input: string): boolean => {\n  // Check for script tags, SQL injection patterns, and other malicious content\n  const suspiciousPatterns = [\n    /<script/i,\n    /javascript:/i,\n    /on\\w+=/i, // onclick, onload, etc.\n    /SELECT.*FROM/i,\n    /UNION.*SELECT/i,\n    /INSERT.*INTO/i,\n    /DROP.*TABLE/i,\n    /ALTER.*TABLE/i,\n    /DELETE.*FROM/i,\n    /eval\\(/i,\n    /document\\.cookie/i,\n    /window\\.location/i,\n    /execCommand/i,\n  ];\n  \n  return suspiciousPatterns.some(pattern => pattern.test(input));\n};\n\n/**\n * Sanitize form data before submission\n */\nexport const sanitizeFormData = (formData: {\n  name: string;\n  email: string;\n  subject: string;\n  message: string;\n}) => {\n  // Check for suspicious input before sanitizing\n  const fieldChecks = {\n    name: isInputSuspicious(formData.name),\n    email: isInputSuspicious(formData.email),\n    subject: isInputSuspicious(formData.subject),\n    message: isInputSuspicious(formData.message),\n  };\n  \n  // Log suspicious activity\n  if (Object.values(fieldChecks).some(Boolean)) {\n    logSecurityEvent('suspicious_input', { \n      fields: Object.entries(fieldChecks)\n        .filter(([_, isSuspicious]) => isSuspicious)\n        .map(([field]) => field)\n    });\n    \n    // Add a small delay to slow down attackers\n    addRandomDelay();\n  }\n  \n  return {\n    name: sanitizeInput(formData.name),\n    email: sanitizeInput(formData.email),\n    subject: sanitizeInput(formData.subject),\n    message: sanitizeInput(formData.message),\n  };\n};\n\n/**\n * Validate form data\n * Returns array of error messages, empty if valid\n */\nexport const validateFormData = (\n  name: string,\n  email: string,\n  subject: string,\n  message: string\n): string[] => {\n  const errors: string[] = [];\n\n  // Name validation\n  if (!name) {\n    errors.push('Name is required');\n  } else if (!isValidName(name)) {\n    if (name.length < MIN_LENGTH.name) {\n      errors.push(`Name must be at least ${MIN_LENGTH.name} characters long`);\n    } else if (name.length > MAX_LENGTH.name) {\n      errors.push(`Name must be no more than ${MAX_LENGTH.name} characters long`);\n    } else {\n      errors.push('Name can only contain letters, with spaces, hyphens, or apostrophes between words');\n    }\n  }\n\n  // Email validation\n  if (!email) {\n    errors.push('Email is required');\n  } else if (!isValidEmail(email)) {\n    if (email.length > MAX_LENGTH.email) {\n      errors.push(`Email must be no more than ${MAX_LENGTH.email} characters long`);\n    } else {\n      errors.push('Please enter a valid email address');\n    }\n  }\n\n  // Subject validation\n  if (!subject) {\n    errors.push('Please select a subject');\n  } else if (subject.length > MAX_LENGTH.subject) {\n    errors.push(`Subject must be no more than ${MAX_LENGTH.subject} characters long`);\n  }\n\n  // Message validation\n  if (!message) {\n    errors.push('Message is required');\n  } else if (message.length < MIN_LENGTH.message) {\n    errors.push(`Message must be at least ${MIN_LENGTH.message} characters long`);\n  } else if (message.length > MAX_LENGTH.message) {\n    errors.push(`Message must be no more than ${MAX_LENGTH.message} characters long`);\n  }\n\n  return errors;\n};\n\n/**\n * Check if rate limit has been exceeded\n * Returns true if rate limit exceeded\n */\nexport const isRateLimited = (): boolean => {\n  const now = Date.now();\n\n  // Reset rate limiting after time window\n  if (firstAttemptTime && now - firstAttemptTime > RATE_LIMIT.timeWindow) {\n    attempts = 0;\n    firstAttemptTime = null;\n  }\n\n  // Initialize first attempt time\n  if (!firstAttemptTime) {\n    firstAttemptTime = now;\n  }\n\n  attempts++;\n  \n  // Log excessive attempts\n  if (attempts > RATE_LIMIT.maxAttempts) {\n    logSecurityEvent('rate_limit_exceeded', { \n      attempts,\n      timeWindow: RATE_LIMIT.timeWindow \n    });\n    \n    // Add random delay to slow down attacks\n    addRandomDelay();\n  }\n\n  return attempts > RATE_LIMIT.maxAttempts;\n};\n\n/**\n * Validate honeypot field for bot detection\n * @param honeypotValue The value of the honeypot field (should be empty)\n * @returns True if the submission appears to be from a bot\n */\nexport const isBotSubmission = (honeypotValue: string): boolean => {\n  if (honeypotValue) {\n    logSecurityEvent('honeypot_triggered', {});\n    return true;\n  }\n  \n  return false;\n};\n\n/**\n * Check if form is being submitted too quickly\n * Used to detect automated submissions\n * @param lastSubmitTime Time of the last submission in milliseconds\n * @param minTimeGap Minimum time gap between submissions in milliseconds\n * @returns True if the submission is too quick\n */\nexport const isSubmittingTooQuickly = (lastSubmitTime: number, minTimeGap: number = 2000): boolean => {\n  const now = Date.now();\n  const timeSinceLastSubmit = now - lastSubmitTime;\n  \n  if (lastSubmitTime && timeSinceLastSubmit < minTimeGap) {\n    logSecurityEvent('rapid_submission', { \n      timeSinceLastSubmit,\n      threshold: minTimeGap \n    });\n    return true;\n  }\n  \n  return false;\n}; ","import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport SEO from '../components/SEO';\nimport JsonLd from '../components/JsonLd';\nimport { createBreadcrumbStructuredData } from '../utils/structuredData';\nimport { getCanonicalUrl } from '../utils/seo';\nimport { \n  validateFormData, \n  isValidName, \n  isValidEmail, \n  sanitizeFormData, \n  isRateLimited,\n  isBotSubmission,\n  isSubmittingTooQuickly\n} from '../utils/security';\nimport '../assets/css/contact.css';\n\n// Safety fallback for environment variables\nconst DISCORD_URL = import.meta.env.VITE_APP_DISCORD_URL || 'https://discord.gg/rvnug';\n\n// Form validation constants\nconst MAX_LENGTH = {\n  name: 100,\n  email: 254,\n  subject: 150,\n  message: 3000,\n};\n\nconst MIN_LENGTH = {\n  name: 2,\n  message: 10,\n};\n\n// Throttling configuration\nconst SUBMIT_COOLDOWN = 2000; // 2 seconds between submissions\n\nconst ContactPage = () => {\n  const location = useLocation();\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    subject: 'General Inquiry',\n    message: '',\n  });\n  const [errors, setErrors] = useState<string[]>([]);\n  const [fieldErrors, setFieldErrors] = useState({\n    name: '',\n    email: '',\n    subject: '',\n    message: '',\n  });\n  \n  // Security enhancement states\n  const [isLimited, setIsLimited] = useState(false);\n  const [lastSubmitTime, setLastSubmitTime] = useState(0);\n  const [honeypot, setHoneypot] = useState(''); // Bot detection field\n  const [formStartTime] = useState<number>(Date.now()); // Track when form was loaded\n  \n  // Reset rate limit warning after window expires\n  useEffect(() => {\n    if (isLimited) {\n      const timer = setTimeout(() => {\n        setIsLimited(false);\n      }, 5 * 60 * 1000); // 5 minutes\n      \n      return () => clearTimeout(timer);\n    }\n  }, [isLimited]);\n\n  // Create breadcrumb structured data\n  const baseUrl = getCanonicalUrl();\n  const breadcrumbData = createBreadcrumbStructuredData([\n    { name: 'Home', url: baseUrl },\n    { name: 'Contact', url: `${baseUrl}/contact` }\n  ]);\n\n  // Validate individual fields on blur\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    let error = '';\n\n    switch (name) {\n      case 'name':\n        if (value && !isValidName(value)) {\n          error = 'Name can only contain letters, with spaces, hyphens, or apostrophes between words';\n        }\n        break;\n      case 'email':\n        if (value && !isValidEmail(value)) {\n          error = 'Please enter a valid email address';\n        }\n        break;\n      case 'subject':\n        if (!value) {\n          error = 'Please select a subject';\n        } else if (value.length > MAX_LENGTH.subject) {\n          error = `Subject must be no more than ${MAX_LENGTH.subject} characters`;\n        }\n        break;\n      case 'message':\n        if (value && value.length < MIN_LENGTH.message) {\n          error = 'Message must be at least 10 characters long';\n        } else if (value && value.length > MAX_LENGTH.message) {\n          error = `Message must be no more than ${MAX_LENGTH.message} characters`;\n        }\n        break;\n    }\n\n    setFieldErrors(prev => ({\n      ...prev,\n      [name]: error\n    }));\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    // Clear field error when user starts typing\n    setFieldErrors(prev => ({\n      ...prev,\n      [name]: ''\n    }));\n    // Store raw input value\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  \n  // Honeypot handler (invisible to users, only filled by bots)\n  const handleHoneypotChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setHoneypot(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setErrors([]);\n    \n    // Bot detection - silently fail if honeypot is filled\n    if (isBotSubmission(honeypot)) {\n      // Return silently without any indication\n      return;\n    }\n    \n    // Check for submissions that are too fast (likely bots)\n    const formFillTime = Date.now() - formStartTime;\n    if (formFillTime < 1500) { // Less than 1.5 seconds is suspiciously fast\n      // Silently ignore - it's likely a bot\n      console.warn('Form submitted suspiciously quickly');\n      return;\n    }\n    \n    // Submission throttling\n    if (isSubmittingTooQuickly(lastSubmitTime, SUBMIT_COOLDOWN)) {\n      setErrors(['Please wait a moment before submitting again.']);\n      return;\n    }\n    setLastSubmitTime(Date.now());\n    \n    // Rate limiting check\n    if (isRateLimited()) {\n      setErrors(['Too many attempts. Please try again in a few minutes.']);\n      setIsLimited(true);\n      return;\n    }\n\n    // Validate form data\n    const validationErrors = validateFormData(\n      formData.name,\n      formData.email,\n      formData.subject,\n      formData.message\n    );\n\n    if (validationErrors.length > 0) {\n      setErrors(validationErrors);\n      return;\n    }\n\n    // Sanitize form data before creating mailto URL\n    const sanitizedData = sanitizeFormData(formData);\n\n    // Create mailto URL with sanitized form data\n    const mailtoUrl = `mailto:officers@rvnug.org?subject=${encodeURIComponent(`[RVNUG.ORG Contact Form] ${sanitizedData.subject}`)}&body=${encodeURIComponent(\n`From: ${sanitizedData.name}\nEmail: ${sanitizedData.email}\n\n${sanitizedData.message}`\n    )}`;\n    \n    // Open default email client\n    window.location.href = mailtoUrl;\n  };\n\n  return (\n    <div className=\"contact-page\">\n      <SEO\n        title=\"Contact Us - Roanoke Valley .NET User Group (RVNUG)\"\n        description=\"Reach out to the Roanoke Valley .NET User Group. Whether you have questions, want to become a sponsor, or are interested in speaking at one of our events, we'd love to hear from you.\"\n        keywords=\"contact, get in touch, email, questions, sponsorship, speaking opportunities, feedback\"\n        pathName={location.pathname}\n      />\n      \n      <JsonLd data={breadcrumbData} />\n      \n      <div className=\"page-header\">\n        <h1>Contact Us</h1>\n        <p>Get in touch with the RVNUG team</p>\n      </div>\n\n      <div className=\"contact-content\">\n        <div className=\"contact-options\">\n          <div className=\"contact-option\">\n            <i className=\"fas fa-envelope\"></i>\n            <h3>Email</h3>\n            <p>\n              General Inquiries/Sponsorship: <a href=\"mailto:officers@rvnug.org\">officers@rvnug.org</a><br />\n            </p>\n          </div>\n          \n          <div className=\"contact-option\">\n            <i className=\"fab fa-discord\"></i>\n            <h3>Discord</h3>\n            <p>\n              Join our Discord server to chat with other members and get real-time updates.\n            </p>\n            <a \n              href={DISCORD_URL}\n              className=\"btn btn-secondary\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Chat on Discord\n            </a>\n          </div>\n          \n          <div className=\"contact-option\">\n            <i className=\"fab fa-meetup\"></i>\n            <h3>Meetup</h3>\n            <p>\n              Join our Meetup group to stay updated on events and connect with other members.\n            </p>\n            <a \n              href=\"https://www.meetup.com/roanoke-valley-net-user-group/\" \n              className=\"btn btn-secondary\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Join on Meetup\n            </a>\n          </div>\n          \n          <div className=\"contact-option\">\n            <i className=\"fab fa-github\"></i>\n            <h3>GitHub</h3>\n            <p>\n              Check out our code repositories and contribute to our projects.\n            </p>\n            <a \n              href=\"https://github.com/rvnug\" \n              className=\"btn btn-secondary\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              GitHub\n            </a>\n          </div>\n        </div>\n\n        <div className=\"contact-form-container\">\n          <h2>Send Us a Message</h2>\n          <p className=\"form-info\">\n            Fill out this form to compose an email. Your default email client will open with the message ready to send.\n          </p>\n\n          {isLimited && (\n            <div className=\"error-message\" role=\"alert\">\n              <p>Rate limit exceeded. Please try again in a few minutes.</p>\n            </div>\n          )}\n\n          {errors.length > 0 && (\n            <div className=\"error-message\" role=\"alert\">\n              <ul>\n                {errors.map((error, index) => (\n                  <li key={index}>{error}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n          \n          <form className=\"contact-form\" onSubmit={handleSubmit} noValidate>\n            {/* Honeypot field - invisible to humans, catches bots */}\n            <input\n              type=\"text\"\n              name=\"website\"\n              value={honeypot}\n              onChange={handleHoneypotChange}\n              style={{ opacity: 0, position: 'absolute', height: 0 }}\n              tabIndex={-1}\n              aria-hidden=\"true\"\n              autoComplete=\"off\"\n            />\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"name\">Name</label>\n              <input\n                type=\"text\"\n                id=\"name\"\n                name=\"name\"\n                value={formData.name}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                required\n                minLength={MIN_LENGTH.name}\n                maxLength={MAX_LENGTH.name}\n                pattern=\"[a-zA-Z]+(?:[\\s'-][a-zA-Z]+)*\"\n                aria-describedby=\"name-error\"\n                disabled={isLimited}\n                autoComplete=\"name\"\n              />\n              {fieldErrors.name && (\n                <span className=\"field-error\" id=\"name-error\" role=\"alert\">{fieldErrors.name}</span>\n              )}\n            </div>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"email\">Your Email</label>\n              <input\n                type=\"email\"\n                id=\"email\"\n                name=\"email\"\n                value={formData.email}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                required\n                maxLength={MAX_LENGTH.email}\n                aria-describedby=\"email-error\"\n                disabled={isLimited}\n                autoComplete=\"email\"\n              />\n              {fieldErrors.email && (\n                <span className=\"field-error\" id=\"email-error\" role=\"alert\">{fieldErrors.email}</span>\n              )}\n            </div>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"subject\">Subject</label>\n              <select\n                id=\"subject\"\n                name=\"subject\"\n                value={formData.subject}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                required\n                aria-describedby=\"subject-error\"\n                disabled={isLimited}\n              >\n                <option value=\"\">Select a subject</option>\n                <option value=\"General Question\">General Question</option>\n                <option value=\"Sponsorship\">Sponsorship</option>\n                <option value=\"Speaking Opportunity\">Speaking Opportunity</option>\n                <option value=\"Volunteer\">Volunteer</option>\n                <option value=\"Other\">Other</option>\n              </select>\n              {fieldErrors.subject && (\n                <span className=\"field-error\" id=\"subject-error\" role=\"alert\">{fieldErrors.subject}</span>\n              )}\n            </div>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"message\">Message</label>\n              <textarea\n                id=\"message\"\n                name=\"message\"\n                rows={5}\n                value={formData.message}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                required\n                minLength={MIN_LENGTH.message}\n                maxLength={MAX_LENGTH.message}\n                aria-describedby=\"message-error\"\n                disabled={isLimited}\n                autoComplete=\"off\"\n              ></textarea>\n              {fieldErrors.message && (\n                <span className=\"field-error\" id=\"message-error\" role=\"alert\">{fieldErrors.message}</span>\n              )}\n            </div>\n            \n            <button \n              type=\"submit\" \n              className=\"btn btn-primary\"\n              disabled={isLimited}\n            >\n              Open Email Client to Send\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ContactPage;"],"names":["EMAIL_REGEX","NAME_REGEX","MAX_LENGTH","MIN_LENGTH","RATE_LIMIT","attempts","firstAttemptTime","addRandomDelay","async","delay","Math","floor","random","Promise","resolve","setTimeout","sanitizeInput","input","replace","trim","isValidEmail","email","test","length","isValidName","name","isInputSuspicious","some","pattern","ContactPage","location","useLocation","formData","setFormData","useState","subject","message","errors","setErrors","fieldErrors","setFieldErrors","isLimited","setIsLimited","lastSubmitTime","setLastSubmitTime","honeypot","setHoneypot","formStartTime","Date","now","useEffect","timer","clearTimeout","baseUrl","getCanonicalUrl","breadcrumbData","createBreadcrumbStructuredData","url","handleBlur","e","value","target","error","prev","handleChange","className","children","_jsx","SEO","title","description","keywords","pathName","pathname","JsonLd","data","_jsxs","href","import","rel","role","map","index","onSubmit","isBotSubmission","preventDefault","isSubmittingTooQuickly","minTimeGap","isRateLimited","maxAttempts","validationErrors","validateFormData","push","sanitizedData","sanitizeFormData","fieldChecks","Object","values","Boolean","entries","filter","_","isSuspicious","field","mailtoUrl","encodeURIComponent","window","noValidate","type","onChange","style","opacity","position","height","tabIndex","autoComplete","htmlFor","id","onBlur","required","minLength","maxLength","disabled","rows"],"mappings":"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"}