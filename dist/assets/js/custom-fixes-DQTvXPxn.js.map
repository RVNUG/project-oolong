{"version":3,"file":"custom-fixes-DQTvXPxn.js","sources":["../../../src/services/meetupService.ts","../../../src/hooks/useEvents.ts","../../../src/services/eventsService.ts","../../../src/utils/dateFormatters.ts","../../../src/components/EventCalendarButton.tsx","../../../src/utils/venueUtils.ts"],"sourcesContent":["import { MeetupEvent } from '../types';\nimport { getResourceUrl } from '../utils/config';\n\ninterface MeetupApiResponse {\n  results: MeetupEvent[];\n}\n\n// Define window type augmentation for custom callback\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\n// Get group name from environment variable or use default\nconst MEETUP_GROUP_NAME = import.meta.env.VITE_APP_MEETUP_GROUP_NAME || 'roanoke-valley-net-user-group';\n\n/**\n * Main function to get Meetup events, prioritizing local data\n * @returns Promise that resolves to an array of MeetupEvent objects\n */\nexport const getMeetupEvents = async (): Promise<MeetupEvent[]> => {\n  try {\n    // First try to load from local JSON file\n    const localEvents = await fetchLocalEvents();\n    \n    // If we have local events, use them\n    if (localEvents && localEvents.length > 0) {\n      return localEvents;\n    }\n    \n    // If no local events, try the API\n    try {\n      // Try JSONP approach first\n      const events = await fetchMeetupEvents();\n      return events;\n    } catch (error) {\n      console.error('JSONP approach failed, trying proxy:', error);\n      // If JSONP fails, try CORS proxy\n      const proxyEvents = await fetchMeetupEventsViaProxy();\n      return proxyEvents;\n    }\n  } catch (error) {\n    console.error('Failed to get Meetup events:', error);\n    // Return empty array if everything fails\n    return [];\n  }\n};\n\n/**\n * Fetch events from Meetup API using JSONP approach to avoid CORS issues on GitHub Pages\n * @returns Promise that resolves to an array of MeetupEvent objects\n */\nexport const fetchMeetupEvents = (): Promise<MeetupEvent[]> => {\n  return new Promise((resolve, reject) => {\n    // Create a unique callback name\n    const callbackName = `handleMeetupEvents_${Date.now()}`;\n    const timeoutId = setTimeout(() => {\n      if (script.parentNode) {\n        script.parentNode.removeChild(script);\n      }\n      delete window[callbackName];\n      \n      reject(new Error('Timed out waiting for Meetup API response'));\n    }, 10000); // 10 second timeout\n    \n    // Add the callback function to the window object\n    window[callbackName] = (data: MeetupApiResponse) => {\n      // Clear timeout if it exists\n      clearTimeout(timeoutId);\n      \n      // Clean up - remove the script and callback\n      const script = document.getElementById('meetup-jsonp');\n      if (script && script.parentNode) {\n        script.parentNode.removeChild(script);\n      }\n      delete window[callbackName];\n      \n      // Resolve with the data\n      resolve(data.results || []);\n    };\n    \n    // Create a script element to load the Meetup API\n    const script = document.createElement('script');\n    script.id = 'meetup-jsonp';\n    script.src = `https://api.meetup.com/${MEETUP_GROUP_NAME}/events?status=upcoming,past&desc=true&page=20&callback=${callbackName}`;\n    \n    // Handle errors\n    script.onerror = () => {\n      // Clear timeout if it exists\n      clearTimeout(timeoutId);\n      \n      // Clean up\n      if (script.parentNode) {\n        script.parentNode.removeChild(script);\n      }\n      delete window[callbackName];\n      \n      reject(new Error('Failed to load Meetup events'));\n    };\n    \n    // Add the script to the page\n    document.head.appendChild(script);\n  });\n};\n\n/**\n * Try to fetch events using CORS proxy as an alternative to JSONP\n * @returns Promise that resolves to an array of MeetupEvent objects\n */\nexport const fetchMeetupEventsViaProxy = async (): Promise<MeetupEvent[]> => {\n  const proxyUrl = import.meta.env.VITE_APP_CORS_PROXY || 'https://corsproxy.io/?';\n  const meetupApiUrl = `https://api.meetup.com/${MEETUP_GROUP_NAME}/events?status=upcoming,past&desc=true&page=20`;\n  \n  try {\n    const response = await fetch(`${proxyUrl}${encodeURIComponent(meetupApiUrl)}`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch from proxy: ${response.status}`);\n    }\n    const data = await response.json();\n    return data || [];\n  } catch (error) {\n    console.error('Error fetching events via proxy:', error);\n    throw error;\n  }\n};\n\n/**\n * Fallback function to load events from local JSON file\n * @returns Promise that resolves to an array of MeetupEvent objects\n */\nexport const fetchLocalEvents = async (): Promise<MeetupEvent[]> => {\n  try {\n    // Use the getResourceUrl utility to construct the correct URL\n    const eventsUrl = getResourceUrl('data/events.json');\n    \n    const response = await fetch(eventsUrl);\n    \n    if (!response.ok) {\n      throw new Error(`Failed to load local events: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    return data.events || [];\n  } catch (error) {\n    console.error('Error loading local events:', error);\n    return [];\n  }\n}; ","import { useState, useEffect, useCallback } from 'react';\nimport { MeetupEvent } from '../types';\nimport { fetchEvents } from '../services/eventsService';\n\ninterface UseEventsReturn {\n  events: MeetupEvent[];\n  upcomingEvents: MeetupEvent[];\n  pastEvents: MeetupEvent[];\n  loading: boolean;\n  error: string | null;\n  refreshEvents: () => Promise<void>;\n}\n\nexport const useEvents = (): UseEventsReturn => {\n  const [events, setEvents] = useState<MeetupEvent[]>([]);\n  const [upcomingEvents, setUpcomingEvents] = useState<MeetupEvent[]>([]);\n  const [pastEvents, setPastEvents] = useState<MeetupEvent[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Function to categorize events into upcoming and past\n  const categorizeEvents = useCallback((eventsList: MeetupEvent[]) => {\n    const now = new Date();\n    \n    const upcoming = eventsList\n      .filter(event => {\n        // If is_upcoming is explicitly set, prioritize that flag\n        if (event.is_upcoming !== undefined) {\n          return event.is_upcoming === true;\n        }\n        \n        // Otherwise, determine based on date comparison\n        try {\n          // Create a date object using the YYYY-MM-DD and HH:MM format\n          const eventDate = new Date(`${event.local_date}T${event.local_time}`);\n          \n          // Check if eventDate is valid before comparison\n          if (!isNaN(eventDate.getTime())) {\n            return eventDate >= now;\n          }\n        } catch (err) {\n          console.error(`Error parsing date for event ${event.id}:`, err);\n          // If we can't parse the date, default to treating as past\n        }\n        \n        // Default to false if date parsing fails\n        return false;\n      })\n      .sort((a, b) => {\n        try {\n          const dateA = new Date(`${a.local_date}T${a.local_time}`);\n          const dateB = new Date(`${b.local_date}T${b.local_time}`);\n          \n          if (isNaN(dateA.getTime()) || isNaN(dateB.getTime())) {\n            return 0; // Keep order the same if either date is invalid\n          }\n          \n          return dateA.getTime() - dateB.getTime();\n        } catch (err) {\n          console.error('Error sorting events:', err);\n          return 0;\n        }\n      });\n      \n    const past = eventsList\n      .filter(event => {\n        // If is_upcoming is explicitly set, prioritize that flag\n        if (event.is_upcoming !== undefined) {\n          return event.is_upcoming === false;\n        }\n        \n        // Otherwise, determine based on date comparison\n        try {\n          const eventDate = new Date(`${event.local_date}T${event.local_time}`);\n          \n          // Check if eventDate is valid before comparison\n          if (!isNaN(eventDate.getTime())) {\n            return eventDate < now;\n          }\n        } catch (err) {\n          console.error(`Error parsing date for event ${event.id}:`, err);\n          // If we can't parse the date, default to treating as past\n        }\n        \n        // Default to true if date parsing fails (assume past)\n        return true;\n      })\n      .sort((a, b) => {\n        try {\n          const dateA = new Date(`${a.local_date}T${a.local_time}`);\n          const dateB = new Date(`${b.local_date}T${b.local_time}`);\n          \n          if (isNaN(dateA.getTime()) || isNaN(dateB.getTime())) {\n            return 0; // Keep order the same if either date is invalid\n          }\n          \n          return dateB.getTime() - dateA.getTime(); // Past events in reverse chronological order\n        } catch (err) {\n          console.error('Error sorting past events:', err);\n          return 0;\n        }\n      });\n    \n    setUpcomingEvents(upcoming);\n    setPastEvents(past);\n  }, []);\n\n  // Function to load events\n  const loadEvents = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const data = await fetchEvents();\n      setEvents(data);\n      categorizeEvents(data);\n    } catch (err) {\n      const errorMessage = err instanceof Error \n        ? err.message \n        : 'Failed to load events. Please try again later.';\n      setError(errorMessage);\n      console.error('Error in useEvents hook:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [categorizeEvents]);\n\n  // Function to manually refresh events\n  const refreshEvents = useCallback(async (): Promise<void> => {\n    return loadEvents();\n  }, [loadEvents]);\n\n  // Load events on component mount\n  useEffect(() => {\n    loadEvents();\n  }, [loadEvents]);\n\n  return { events, upcomingEvents, pastEvents, loading, error, refreshEvents };\n};\n\nexport default useEvents; ","import { MeetupEvent } from '../types';\nimport { getMeetupEvents } from './meetupService';\nimport { getResourceUrl } from '../utils/config';\n\n/**\n * Fetch events data from local JSON file or fallback to API if needed\n * @returns Promise with events data\n */\nexport const fetchEvents = async (): Promise<MeetupEvent[]> => {\n  try {\n    // Use the getResourceUrl utility to construct the correct URL\n    const eventsUrl = getResourceUrl('data/events.json');\n    \n    const response = await fetch(eventsUrl);\n    \n    if (response.ok) {\n      const data = await response.json();\n      \n      // Check if data contains an events array\n      if (data.events && Array.isArray(data.events)) {\n        return data.events;\n      } else if (Array.isArray(data)) {\n        // Handle case where data is directly an array of events\n        return data;\n      } else {\n        console.warn('Events data has unexpected structure:', data);\n        // Fallback to getMeetupEvents from meetupService\n        return await getMeetupEvents();\n      }\n    }\n    \n    // Fallback to getMeetupEvents from meetupService which has additional fallbacks\n    return await getMeetupEvents();\n  } catch (error) {\n    console.error('Error fetching events from local JSON:', error);\n    // Fallback to API methods if local file fails\n    return await getMeetupEvents();\n  }\n};\n\n/**\n * Fetch a single event by ID\n * @param id Event ID\n * @returns Promise with the event data or null if not found\n */\nexport const fetchEventById = async (id: string): Promise<MeetupEvent | null> => {\n  try {\n    // Fetch all events and find the one with matching ID\n    const events = await fetchEvents();\n    return events.find(e => e.id.toString() === id.toString()) || null;\n  } catch (error) {\n    console.error(`Error fetching event ID ${id}:`, error);\n    return null;\n  }\n}; ","/**\n * Format a date to a full date string (e.g., \"Monday, January 1, 2023\")\n * @param date The date to format\n * @returns Formatted date string\n */\nexport const formatFullDate = (dateString: string): string => {\n  try {\n    // Create date with explicit UTC handling to avoid timezone issues\n    const dateParts = dateString.split('-');\n    if (dateParts.length === 3) {\n      const year = parseInt(dateParts[0], 10);\n      const month = parseInt(dateParts[1], 10) - 1; // Months are 0-indexed\n      const day = parseInt(dateParts[2], 10);\n      \n      if (!isNaN(year) && !isNaN(month) && !isNaN(day)) {\n        const date = new Date(year, month, day);\n        \n        // Validate that the date is valid\n        if (isNaN(date.getTime())) {\n          console.warn(`Invalid date string: ${dateString}`);\n          return \"Date not available\";\n        }\n        \n        return date.toLocaleDateString('en-US', {\n          weekday: 'long',\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric'\n        });\n      }\n    }\n    \n    // Fallback to regular Date constructor if format is not YYYY-MM-DD\n    const date = new Date(dateString);\n    \n    // Validate that the date is valid\n    if (isNaN(date.getTime())) {\n      console.warn(`Invalid date string: ${dateString}`);\n      return \"Date not available\";\n    }\n    \n    return date.toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  } catch (error) {\n    console.error('Error formatting full date:', error);\n    return \"Date not available\";\n  }\n};\n\n/**\n * Format a time string (e.g., \"7:00 PM\")\n * @param timeString The time string to format\n * @returns Formatted time string\n */\nexport const formatTime = (timeString: string | Date | undefined): string => {\n  try {\n    // Handle undefined or null\n    if (!timeString) {\n      return \"Time not available\";\n    }\n\n    // If timeString is already a Date object\n    if (timeString instanceof Date) {\n      return timeString.toLocaleTimeString('en-US', {\n        hour: 'numeric',\n        minute: '2-digit',\n        hour12: true\n      });\n    }\n\n    // If it's a string in HH:MM format (24-hour format from events.json)\n    if (typeof timeString === 'string' && timeString.match(/^\\d{1,2}:\\d{2}$/)) {\n      const [hoursStr, minutesStr] = timeString.split(':');\n      const hours = parseInt(hoursStr, 10);\n      const minutes = parseInt(minutesStr, 10);\n      \n      if (!isNaN(hours) && !isNaN(minutes)) {\n        const date = new Date();\n        date.setHours(hours);\n        date.setMinutes(minutes);\n        date.setSeconds(0);\n        \n        return date.toLocaleTimeString('en-US', {\n          hour: 'numeric',\n          minute: '2-digit',\n          hour12: true\n        });\n      }\n    }\n    \n    // For other string formats, try to parse \n    if (typeof timeString === 'string') {\n      // Check if the string has a colon (indicating time format)\n      if (timeString.includes(':')) {\n        const parts = timeString.split(':');\n        if (parts.length >= 2) {\n          const hours = parseInt(parts[0], 10);\n          const minutes = parseInt(parts[1], 10);\n          \n          // Check if parsing was successful\n          if (!isNaN(hours) && !isNaN(minutes)) {\n            const date = new Date();\n            date.setHours(hours);\n            date.setMinutes(minutes);\n            \n            return date.toLocaleTimeString('en-US', {\n              hour: 'numeric',\n              minute: '2-digit',\n              hour12: true\n            });\n          }\n        }\n      }\n      \n      // Try to parse as ISO string or any other date format\n      const date = new Date(timeString);\n      if (!isNaN(date.getTime())) {\n        return date.toLocaleTimeString('en-US', {\n          hour: 'numeric',\n          minute: '2-digit',\n          hour12: true\n        });\n      }\n    }\n    \n    // If we reach here, we couldn't parse the time\n    console.warn(`Could not parse time: ${timeString}`);\n    return timeString.toString(); // Return the original string if we can't parse it\n  } catch (error) {\n    console.error(\"Error formatting time:\", error);\n    return \"Time not available\";\n  }\n};\n\n/**\n * Convert a Meetup date and time strings to a Date object\n * @param date_str Date string in format \"YYYY-MM-DD\"\n * @param time_str Time string in format \"HH:MM\"\n * @returns Date object\n */\nexport const formatMeetupDateTime = (date_str: string, time_str: string): Date => {\n  try {\n    // Parse date parts to avoid timezone issues\n    const [year, month, day] = date_str.split('-').map(Number);\n    const [hours, minutes] = time_str.split(':').map(Number);\n    \n    // Create Date with explicit parts\n    const date = new Date();\n    date.setFullYear(year);\n    date.setMonth(month - 1); // Months are 0-indexed\n    date.setDate(day);\n    date.setHours(hours);\n    date.setMinutes(minutes);\n    date.setSeconds(0);\n    date.setMilliseconds(0);\n    \n    return date;\n  } catch (error) {\n    console.error('Error parsing date:', error);\n    return new Date(); // Return current date as fallback\n  }\n};\n\n/**\n * Format a date for display in event cards (e.g., \"Jan 1, 2023\")\n * @param date The date to format\n * @returns Formatted date string\n */\nexport const formatShortDate = (date: Date): string => {\n  // Check if the date is valid\n  if (!(date instanceof Date) || isNaN(date.getTime())) {\n    return \"Date not available\";\n  }\n  \n  return date.toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric'\n  });\n};\n\n/**\n * Calculate and format the duration of an event\n * @param startTime Start time in milliseconds\n * @param duration Duration in milliseconds\n * @returns Formatted duration string\n */\nexport const formatDuration = (startTime: number, duration: number = 7200000): string => {\n  // Default duration is 2 hours (7200000 milliseconds)\n  const endTime = new Date(startTime + duration);\n  const startDate = new Date(startTime);\n  \n  const startHour = startDate.toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true\n  });\n  \n  const endHour = endTime.toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true\n  });\n  \n  return `${startHour} - ${endHour}`;\n};\n\n/**\n * Get month abbreviation (e.g., \"Jan\", \"Feb\")\n */\nexport const getMonthAbbr = (date: Date): string => {\n  // Check if the date is valid\n  if (!(date instanceof Date) || isNaN(date.getTime())) {\n    return \"---\";\n  }\n  \n  const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  return monthNames[date.getMonth()];\n}; ","import React, { useState, useRef, useEffect } from 'react';\nimport { MeetupEvent } from '../types';\nimport '../assets/css/event-calendar-button.css';\nimport sanitizeHtml from 'sanitize-html';\ninterface EventCalendarButtonProps {\n  event: MeetupEvent;\n  buttonLabel?: string;\n  className?: string;\n}\n\n/**\n * EventCalendarButton - Custom calendar integration button\n * \n * This component creates a dropdown menu with options to add events to\n * different calendar services (Google, Apple, Outlook, Yahoo, etc.)\n */\nconst EventCalendarButton = ({ \n  event, \n  buttonLabel = 'Add to Calendar',\n  className = '' \n}: EventCalendarButtonProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  \n  // Handle clicking outside to close dropdown\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        !isOpen ||\n        (dropdownRef.current && \n        dropdownRef.current.contains(event.target as Node)) ||\n        (buttonRef.current && \n        buttonRef.current.contains(event.target as Node))\n      ) {\n        return; // Early return if dropdown is closed or click is inside\n      }\n      \n      setIsOpen(false);\n    };\n\n    // Add event listeners\n    document.addEventListener('mousedown', handleClickOutside);\n    \n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isOpen]);\n  \n  // Ensure we have valid dates\n  if (!event.local_date || !event.local_time) {\n    return null;\n  }\n\n  // Create date objects for start and end times\n  const startDateTime = new Date(`${event.local_date}T${event.local_time}`);\n  \n  // Determine end time based on common event patterns\n  let endDateTime: Date;\n\n  if (event.duration) {\n    // If we have an explicit duration in milliseconds, use it\n    endDateTime = new Date(startDateTime.getTime() + event.duration);\n  } else {\n    // Otherwise infer a reasonable duration based on the event type/time\n    const eventName = event.name.toLowerCase();\n    const startHour = startDateTime.getHours();\n    \n    if (eventName.includes('code and coffee') || \n        (startHour >= 8 && startHour <= 11)) {\n      // Morning events typically run 3 hours (Code and Coffee events)\n      endDateTime = new Date(startDateTime.getTime() + 3 * 60 * 60 * 1000);\n    } else if (eventName.includes('social') || \n              eventName.includes('mixer') || \n              eventName.includes('networking')) {\n      // Social events typically run 2 hours\n      endDateTime = new Date(startDateTime.getTime() + 2 * 60 * 60 * 1000);\n    } else if (startHour >= 17 && startHour <= 19) {\n      // Evening events (typically evening talks) run 1.5 hours\n      endDateTime = new Date(startDateTime.getTime() + 90 * 60 * 1000);\n    } else {\n      // Default to a 2-hour event for everything else\n      endDateTime = new Date(startDateTime.getTime() + 2 * 60 * 60 * 1000);\n    }\n  }\n  \n  // Clean description by removing HTML tags\n  const cleanDescription = sanitizeHtml(event.description)\n    ?  sanitizeHtml(event.description)\n    : 'Join us for this Roanoke Valley .NET User Group event.';\n  \n  // Format times for calendar services\n  const dateStart = startDateTime.toISOString().replace(/-|:|\\.\\d+/g, '');\n  const dateEnd = endDateTime.toISOString().replace(/-|:|\\.\\d+/g, '');\n  \n  // Determine the location string\n  let locationStr = 'Online Event';\n  if (event.venue && !event.is_online) {\n    locationStr = `${event.venue.name}${event.venue.address_1 ? ', ' + event.venue.address_1 : ''}${event.venue.city ? ', ' + event.venue.city : ''}${event.venue.state ? ', ' + event.venue.state : ''}`;\n  }\n\n  // Toggle dropdown\n  const toggleDropdown = (e: React.MouseEvent) => {\n    e.stopPropagation(); // Prevent event bubbling\n    setIsOpen(!isOpen);\n  };\n\n  // Generate Google Calendar URL with Eastern timezone\n  const getGoogleCalendarUrl = () => {\n    const baseUrl = 'https://calendar.google.com/calendar/render';\n    const details = encodeURIComponent(cleanDescription);\n    const location = encodeURIComponent(locationStr);\n    const text = encodeURIComponent(event.name);\n    const dates = `${dateStart}/${dateEnd}`;\n    \n    return `${baseUrl}?action=TEMPLATE&text=${text}&dates=${dates}&details=${details}&location=${location}&ctz=America/New_York&sprop=website:rvnug.org`;\n  };\n\n  // Generate Yahoo Calendar URL\n  const getYahooCalendarUrl = () => {\n    const baseUrl = 'https://calendar.yahoo.com/';\n    const title = encodeURIComponent(event.name);\n    const desc = encodeURIComponent(cleanDescription);\n    const loc = encodeURIComponent(locationStr);\n    const st = dateStart;\n    const et = dateEnd;\n    \n    return `${baseUrl}?v=60&title=${title}&st=${st}&et=${et}&desc=${desc}&in_loc=${loc}`;\n  };\n\n  // Generate Outlook Web URL\n  const getOutlookCalendarUrl = () => {\n    const baseUrl = 'https://outlook.live.com/calendar/0/action/compose';\n    const subject = encodeURIComponent(event.name);\n    const body = encodeURIComponent(cleanDescription);\n    const location = encodeURIComponent(locationStr);\n    // Outlook uses a different date format\n    const startTime = startDateTime.toISOString();\n    const endTime = endDateTime.toISOString();\n    \n    return `${baseUrl}?subject=${subject}&body=${body}&location=${location}&startdt=${startTime}&enddt=${endTime}`;\n  };\n\n  // Generate iCal file content with Eastern timezone\n  const getICalFileContent = () => {\n    // Format dates for iCal\n    const formatDate = (date: Date) => {\n      return date.toISOString().replace(/-|:|\\.\\d+/g, '');\n    };\n    \n    const now = new Date();\n    const calStart = formatDate(startDateTime);\n    const calEnd = formatDate(endDateTime);\n    const createdNow = formatDate(now);\n    \n    // Create unique identifier for the event\n    const uid = `event-${event.id}@rvnug.org`;\n    \n    // Build iCal file content with explicit timezone\n    return `BEGIN:VCALENDAR\nVERSION:2.0\nPRODID:-//RVNUG//Event Calendar//EN\nCALSCALE:GREGORIAN\nMETHOD:PUBLISH\nBEGIN:VEVENT\nUID:${uid}\nSUMMARY:${event.name}\nDTSTAMP:${createdNow}\nDTSTART:${calStart}\nDTEND:${calEnd}\nDESCRIPTION:${cleanDescription.replace(/\\n/g, '\\\\n')}\nLOCATION:${locationStr}\nSTATUS:CONFIRMED\nSEQUENCE:0\nTZID:America/New_York\nEND:VEVENT\nEND:VCALENDAR`;\n  };\n\n  // Calendar option handlers\n  const handleGoogleCalendar = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    window.open(getGoogleCalendarUrl(), '_blank');\n    setIsOpen(false);\n  };\n  \n  const handleOutlookCalendar = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    window.open(getOutlookCalendarUrl(), '_blank');\n    setIsOpen(false);\n  };\n  \n  const handleYahooCalendar = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    window.open(getYahooCalendarUrl(), '_blank');\n    setIsOpen(false);\n  };\n\n  // Download iCal file\n  const downloadICalFile = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    const fileName = `${event.name.replace(/\\s+/g, '_')}.ics`;\n    const fileContent = getICalFileContent();\n    const blob = new Blob([fileContent], { type: 'text/calendar;charset=utf-8' });\n    const link = document.createElement('a');\n    \n    link.href = URL.createObjectURL(blob);\n    link.download = fileName;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    setIsOpen(false);\n  };\n\n  // Handle Apple/iCal (just downloads .ics file)\n  const handleAppleCalendar = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    downloadICalFile(e);\n  };\n\n  return (\n    <div className=\"custom-calendar-dropdown\">\n      <button \n        ref={buttonRef}\n        className={className} \n        onClick={toggleDropdown}\n        aria-haspopup=\"true\" \n        aria-expanded=\"false\"\n        aria-label=\"Add to Calendar\"\n      >\n        <i className=\"far fa-calendar-plus\" aria-hidden=\"true\"></i> {buttonLabel}\n      </button>\n      \n      {isOpen && (\n        <div \n          ref={dropdownRef}\n          className=\"calendar-dropdown-menu\"\n          onClick={e => e.stopPropagation()}\n          role=\"menu\"\n          aria-orientation=\"vertical\"\n        >\n          <button \n            className=\"calendar-option google\" \n            onClick={handleGoogleCalendar}\n            role=\"menuitem\"\n          >\n            <i className=\"fab fa-google\" aria-hidden=\"true\"></i> Google Calendar\n          </button>\n          \n          <button \n            className=\"calendar-option apple\" \n            onClick={handleAppleCalendar}\n            role=\"menuitem\"\n          >\n            <i className=\"fab fa-apple\" aria-hidden=\"true\"></i> Apple Calendar\n          </button>\n          \n          <button \n            className=\"calendar-option outlook\" \n            onClick={handleOutlookCalendar}\n            role=\"menuitem\"\n          >\n            <i className=\"far fa-envelope\" aria-hidden=\"true\"></i> Outlook\n          </button>\n          \n          <button \n            className=\"calendar-option yahoo\" \n            onClick={handleYahooCalendar}\n            role=\"menuitem\"\n          >\n            <i className=\"fab fa-yahoo\" aria-hidden=\"true\"></i> Yahoo\n          </button>\n          \n          <button \n            className=\"calendar-option ics\" \n            onClick={downloadICalFile}\n            role=\"menuitem\"\n          >\n            <i className=\"far fa-calendar-alt\" aria-hidden=\"true\"></i> Download .ics\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EventCalendarButton; ","import { MeetupEvent } from '../types';\n\n/**\n * Format venue address to avoid duplication between address_1 and city/state\n * @param venue The venue object from the event\n * @param isOnline Whether the event is online\n * @returns Formatted address string\n */\nexport const formatVenueAddress = (venue?: MeetupEvent['venue'], isOnline = false): string => {\n  if (!venue || isOnline) {\n    return '';\n  }\n\n  // If address_1 is empty, just return city, state, zip\n  if (!venue.address_1) {\n    return `${venue.city || ''}, ${venue.state || ''} ${venue.zip || ''}`.trim().replace(/^,\\s+/, '');\n  }\n\n  // Create the city/state format for comparison\n  const cityStateFormat = `${venue.city || ''}, ${venue.state || ''}`.trim();\n  const cityStateFormatWithSpace = `${venue.city || ''},  ${venue.state || ''}`.trim();\n  \n  // Check if address_1 is just the city/state\n  const isAddressSameAsCityState = \n    venue.address_1 === cityStateFormat ||\n    venue.address_1 === cityStateFormatWithSpace;\n  \n  if (isAddressSameAsCityState) {\n    // Return just the city/state without duplicating\n    return `${venue.city || ''}, ${venue.state || ''} ${venue.zip || ''}`.trim();\n  } else {\n    // Format the full address, carefully handling empty components\n    const addressParts = [];\n    \n    if (venue.address_1) {\n      addressParts.push(venue.address_1);\n    }\n    \n    if (venue.city) {\n      addressParts.push(venue.city);\n    }\n    \n    if (venue.state) {\n      addressParts.push(venue.state);\n    }\n    \n    // Combine with commas\n    let formattedAddress = addressParts.join(', ');\n    \n    // Add zip if available\n    if (venue.zip) {\n      formattedAddress += ` ${venue.zip}`;\n    }\n    \n    return formattedAddress.trim();\n  }\n};\n\n/**\n * Check if an event is online based on its properties\n * @param event The MeetupEvent object\n * @returns Boolean indicating if the event is online\n */\nexport const isEventOnline = (event: MeetupEvent): boolean => {\n  return Boolean(\n    event.is_online || \n    (event.venue && event.venue.name === 'Online Event')\n  );\n}; "],"names":["MEETUP_GROUP_NAME","import","getMeetupEvents","async","localEvents","fetchLocalEvents","length","events","fetchMeetupEvents","error","proxyEvents","fetchMeetupEventsViaProxy","Promise","resolve","reject","callbackName","Date","now","timeoutId","setTimeout","script","parentNode","removeChild","window","Error","data","clearTimeout","document","getElementById","results","createElement","id","src","onerror","head","appendChild","proxyUrl","meetupApiUrl","response","fetch","encodeURIComponent","ok","status","json","eventsUrl","getResourceUrl","useEvents","setEvents","useState","upcomingEvents","setUpcomingEvents","pastEvents","setPastEvents","loading","setLoading","setError","categorizeEvents","useCallback","eventsList","upcoming","filter","event","undefined","is_upcoming","eventDate","local_date","local_time","isNaN","getTime","err","sort","a","b","dateA","dateB","past","loadEvents","Array","isArray","fetchEvents","errorMessage","message","refreshEvents","useEffect","formatFullDate","dateString","dateParts","split","year","parseInt","month","day","date","toLocaleDateString","weekday","formatTime","timeString","toLocaleTimeString","hour","minute","hour12","match","hoursStr","minutesStr","hours","minutes","setHours","setMinutes","setSeconds","includes","parts","toString","EventCalendarButton","buttonLabel","className","isOpen","setIsOpen","buttonRef","useRef","dropdownRef","handleClickOutside","current","contains","target","addEventListener","removeEventListener","startDateTime","endDateTime","duration","eventName","name","toLowerCase","startHour","getHours","cleanDescription","sanitizeHtml","description","dateStart","toISOString","replace","dateEnd","locationStr","venue","is_online","address_1","city","state","toggleDropdown","downloadICalFile","e","stopPropagation","fileName","fileContent","getICalFileContent","formatDate","calStart","calEnd","createdNow","blob","Blob","type","link","href","URL","createObjectURL","download","body","click","children","_jsxs","ref","onClick","_jsx","role","open","getGoogleCalendarUrl","details","location","getYahooCalendarUrl","title","desc","loc","formatVenueAddress","isOnline","zip","trim","cityStateFormat","cityStateFormatWithSpace","addressParts","push","formattedAddress","join","isEventOnline","Boolean"],"mappings":"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"}