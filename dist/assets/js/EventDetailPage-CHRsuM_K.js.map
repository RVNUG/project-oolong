{"version":3,"file":"EventDetailPage-CHRsuM_K.js","sources":["../../../src/pages/EventDetailPage.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport useEvents from '../hooks/useEvents';\nimport { MeetupEvent } from '../types';\nimport { formatFullDate, formatTime } from '../utils/dateFormatters';\nimport { formatVenueAddress, isEventOnline } from '../utils/venueUtils';\nimport SEO from '../components/SEO';\nimport JsonLd from '../components/JsonLd';\nimport EventCalendarButton from '../components/EventCalendarButton';\nimport sanitizeHtml from 'sanitize-html';\nimport { createEventStructuredData, createBreadcrumbStructuredData } from '../utils/structuredData';\nimport { getCanonicalUrl } from '../utils/seo';\nimport '../assets/css/event-detail.css';\nimport '../assets/css/custom-fixes.css';\n\nconst EventDetailPage = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { events, loading, error } = useEvents();\n  const [event, setEvent] = useState<MeetupEvent | null>(null);\n  const [imageError, setImageError] = useState(false);\n\n  useEffect(() => {\n    if (!loading && !error && events.length > 0 && id) {\n      const foundEvent = events.find(event => event.id === id);\n      if (foundEvent) {\n        setEvent(foundEvent);\n      } else {\n        // If event not found, navigate to the events page\n        navigate('/events');\n      }\n    }\n  }, [events, loading, error, id, navigate]);\n\n  if (loading) {\n    return <div className=\"loading\">Loading event details...</div>;\n  }\n\n  if (error) {\n    return <div className=\"error-message\">Error: {error}</div>;\n  }\n\n  if (!event) {\n    return <div className=\"loading\">Event not found. Redirecting...</div>;\n  }\n\n  // Safely format date and time for displayx\n  const formattedDate = event.local_date ? formatFullDate(event.local_date) : 'Date not available';\n  const formattedTime = event.local_time ? formatTime(event.local_time) : 'Time not available';\n  \n  // Create a formatted datetime for structured data and other uses\n  let eventDateTime: Date | null = null;\n  try {\n    if (event.local_date && event.local_time) {\n      // Create a date object from the ISO format\n      eventDateTime = new Date(`${event.local_date}T${event.local_time}`);\n      if (isNaN(eventDateTime.getTime())) {\n        console.warn(`Invalid date/time: ${event.local_date}T${event.local_time}`);\n        eventDateTime = null;\n      }\n    }\n  } catch (error) {\n    console.error(\"Error parsing event datetime:\", error);\n    eventDateTime = null;\n  }\n\n  // Check if the event is online\n  const isOnline = isEventOnline(event);\n\n  // Handle image loading error\n  const handleImageError = () => {\n    console.warn(`Failed to load event image for: ${event.name}`);\n    setImageError(true);\n  };\n\n  // Helper function to create a clean description for SEO\n  const createEventDescription = (event: MeetupEvent | null) => {\n    if (!event) return '';\n    \n    // Create a base description with event details\n    let description = `${event.name} - `;\n    \n    // Add date and time information\n    if (event.local_date && event.local_time) {\n      description += `Event on ${new Date(event.local_date).toLocaleDateString()} `;\n    }\n    \n    // Add location information if available\n    if (event.venue && event.venue.name) {\n      description += `at ${event.venue.name}. `;\n    }\n    \n    // Add a portion of the description if available\n    if (event.description) {\n      // Strip HTML and limit length\n      const textDescription = sanitizeHtml(event.description, {\n        allowedTags: [],\n        allowedAttributes: {}\n      });\n      const trimmedDescription = textDescription.length > 150 \n        ? textDescription.substring(0, 147) + '...' \n        : textDescription;\n      \n      description += trimmedDescription;\n    } else {\n      description += 'Join us for this Roanoke Valley .NET User Group event.';\n    }\n    \n    return description;\n  };\n\n  // Create structured data for this event\n  const eventStructuredData = createEventStructuredData(event);\n  \n  // Create breadcrumb structured data\n  const baseUrl = getCanonicalUrl();\n  const breadcrumbData = createBreadcrumbStructuredData([\n    { name: 'Home', url: baseUrl },\n    { name: 'Events', url: `${baseUrl}/events` },\n    { name: event.name, url: `${baseUrl}/event/${event.id}` }\n  ]);\n\n  // Get the formatted venue address\n  const venueAddress = formatVenueAddress(event.venue, isOnline);\n\n  return (\n    <div className=\"event-detail-page\">\n      <SEO\n        title={`${event.name} - RVNUG Event`}\n        description={createEventDescription(event)}\n        keywords={`event, meetup, .NET, ${event.name}, tech event, Roanoke`}\n        ogTitle={event.name}\n        ogDescription={createEventDescription(event)}\n        ogType=\"event\"\n        ogImage=\"/images/roanoke-star-128-logo.png\"\n        pathName={location.pathname}\n      />\n      \n      {/* Add structured data */}\n      <JsonLd data={eventStructuredData} />\n      <JsonLd data={breadcrumbData} />\n      \n      <div className=\"event-detail-card\">\n        <div className=\"event-detail-title-section\">\n          <button className=\"back-button\" onClick={() => navigate('/events')}>\n            <i className=\"fas fa-arrow-left\"></i> Back to Events\n          </button>\n          \n          <h1>{event.name}</h1>\n          \n          <div className=\"event-time-location\">\n            <div className=\"event-datetime\">\n              <i className=\"far fa-calendar-alt\"></i> {formattedDate}\n              <span className=\"divider\">|</span>\n              <i className=\"far fa-clock\"></i> {formattedTime}\n            </div>\n            \n            <div className=\"event-venue\">\n              <i className={isOnline ? 'fas fa-video' : 'fas fa-map-marker-alt'}></i>\n              {isOnline ? 'Online Event' : (event.venue ? event.venue.name : 'Location TBD')}\n              {venueAddress && !isOnline && (\n                <div className=\"venue-address\">{venueAddress}</div>\n              )}\n            </div>\n          </div>\n          \n          {isOnline ? (\n            <div className=\"event-status\">\n              <i className=\"fas fa-wifi\"></i> Online Event\n            </div>\n          ) : null}\n        </div>\n        \n        <div className=\"event-detail-content\">\n          {event.featured_photo && !imageError ? (\n            <div className=\"event-featured-image\">\n              <img \n                src={event.featured_photo.photo_link} \n                alt={`${event.name} featured image`}\n                onError={handleImageError} \n              />\n            </div>\n          ) : (\n            <div className=\"event-image-fallback\">\n              <div className=\"event-image-fallback-icon\">\n                <i className=\"fas fa-calendar-alt\" aria-hidden=\"true\"></i>\n              </div>\n              <span>{event.name}</span>\n            </div>\n          )}\n          \n          <div className=\"event-description\" dangerouslySetInnerHTML={{ __html: event.description }} />\n          \n          <div className=\"event-detail-actions\">\n            <a \n              href={event.link} \n              className=\"btn btn-primary\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <i className=\"fas fa-external-link-alt\"></i> RSVP on Meetup\n            </a>\n            \n            <EventCalendarButton \n              event={event} \n              buttonLabel=\"Add to Calendar\" \n              className=\"btn btn-calendar\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EventDetailPage; "],"names":["EventDetailPage","id","useParams","navigate","useNavigate","location","useLocation","events","loading","error","useEvents","event","setEvent","useState","imageError","setImageError","useEffect","length","foundEvent","find","className","children","formattedDate","local_date","formatFullDate","formattedTime","local_time","formatTime","eventDateTime","Date","isNaN","getTime","isOnline","isEventOnline","createEventDescription","description","name","toLocaleDateString","venue","textDescription","sanitizeHtml","allowedTags","allowedAttributes","trimmedDescription","substring","eventStructuredData","createEventStructuredData","baseUrl","getCanonicalUrl","breadcrumbData","createBreadcrumbStructuredData","url","venueAddress","formatVenueAddress","_jsx","SEO","title","keywords","ogTitle","ogDescription","ogType","ogImage","pathName","pathname","JsonLd","data","_jsxs","onClick","featured_photo","src","photo_link","alt","onError","handleImageError","dangerouslySetInnerHTML","__html","href","link","target","rel","EventCalendarButton","buttonLabel"],"mappings":"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"}